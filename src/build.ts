import { createReadStream, createWriteStream } from "fs";
import { readFile, writeFile, mkdir, readdir, rmdir } from "fs/promises";

import { Converter } from "showdown";
const converter = new Converter();
converter.setOption("noHeaderId", true);

const postsDirectory = (name?: string) =>
  __dirname + "/../posts/" + (name || "");
const buildDirectory = __dirname + "/../build";

/** header and footer on all pages, including index. include social links */
const header = `<nav><h1>tj kandala's personal site</h1><p>catch me on github</p></nav>`;
const footer = `<footer><p>generated by (link to repo)</p></footer>`;

const createPage = (content: string) => `<!DOCTYPE html>
<html>
  <head>
    <title>tj.kanda.la</title>
    <link rel="stylesheet" href="./index.css" />
  </head>
  <body>
    ${header}
    ${content}
    ${footer}
    <script src="./index.js"></script>
  </body>
</html>
`;

async function main() {
  await rmdir(buildDirectory, { recursive: true });
  await mkdir(buildDirectory);

  const metadata: {
    [filename: string]: {
      title: string;
      date: string;
      genre: string;
      description: string;
    };
  } = {};

  // blog posts: markdown => html in /build
  const filenames = await readdir(postsDirectory());
  await Promise.all(
    filenames.map(async name => {
      let file = await readFile(postsDirectory(name), "utf8");
      // don't need .md anymore
      name = name.slice(0, name.length - 3);
      // parse metadata from post
      let keyword = file.substring(0, 4);

      if (keyword != "&&&&") {
        throw new Error("you didn't specify metadata!");
      }

      let rawmetadata = "";

      file = file.slice(4);
      let cursor = 0;

      // console.log(file);

      while (cursor < file.length) {
        keyword = file[cursor];
        if (keyword == "&") {
          // lookahead to next four characters
          keyword = file.substr(cursor, 4);
          if (keyword == "&&&&") {
            rawmetadata = file.slice(0, cursor);
            cursor += 4;
            break;
          }
        }

        cursor++;
      }
      file = file.slice(cursor);
      const jsonMetadata = JSON.parse(rawmetadata);

      // validate structure
      ["title", "date", "genre", "description"].forEach(key => {
        if (!(key in jsonMetadata)) {
          throw new Error(`you forgot to specify ${key}`);
        }
      });

      metadata[name] = jsonMetadata;

      const post = createPage(converter.makeHtml(file));

      return writeFile(__dirname + `/../build/${name}.html`, post);
    })
  );

  const sortedPosts = Object.keys(metadata)
    .map(filename => {
      const { date, ...rest } = metadata[filename];
      return { date: Date.parse(date), filename, ...rest };
    })
    .sort((a, b) => a.date - b.date);

  const postLinks = sortedPosts.map(
    ({ title, date, genre, description, filename }) => {
      return `<div><a href="${filename}.html">${title}</a><p>description</p></div>`;
    }
  );

  // TODO: client side routing for page transitions
  let index = createPage(`
  <div>
  <p>TODO: description of me and/or the site :)</p>
  <ul>
  ${postLinks.join("")}
  </ul>
  </div>
  `);

  // copy index.(css|html|js) to /build
  const indexcssstream = createReadStream(__dirname + "/../public/index.css");
  indexcssstream.pipe(createWriteStream(__dirname + "/../build/index.css"));
  const indexjsstream = createReadStream(__dirname + "/../dist/index.js");
  indexjsstream.pipe(createWriteStream(__dirname + "/../build/index.js"));
  await writeFile(__dirname + "/../build/index.html", index);
}

main();
