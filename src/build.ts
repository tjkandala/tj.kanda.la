import { createReadStream, createWriteStream } from "fs";
import { readFile, writeFile, mkdir, readdir, rmdir } from "fs/promises";

import { Converter } from "showdown";
const converter = new Converter();
converter.setOption("noHeaderId", true);

const postsDirectory = (name?: string) =>
  __dirname + "/../posts/" + (name || "");
const buildDirectory = __dirname + "/../build";

/** header and footer on all pages, including index. include social links */
const header = `<nav>
<a href="index.html">
  <h1 class="name">tj.kanda.la</h1>
</a>
<a href="https://github.com/tjkandala">
  <img src="github.png" class="github" />
</a>
</nav>`;
const footer = `<footer>
<a href="https://github.com/tjkandala/tj.kanda.la">generated by a bespoke SSG</a>
</footer>`;

const createPage = (content: string, title?: string) => `<!DOCTYPE html>
<html>
  <head>
    <title>${title ? `${title} - ` : ""}tj.kanda.la</title>
    <link rel="stylesheet" href="./index.css" />
  </head>
  <body>
    <div class="top"></div>
    ${header}
    ${content}
    ${footer}
    <script src="./index.js"></script>
  </body>
</html>
`;

async function main() {
  await rmdir(buildDirectory, { recursive: true });
  await mkdir(buildDirectory);

  const metadata: {
    [filename: string]: {
      title: string;
      date: string;
      genre: string;
      description: string;
    };
  } = {};

  // blog posts: markdown => html in /build
  const filenames = await readdir(postsDirectory());
  await Promise.all(
    filenames.map(async (name) => {
      let file = await readFile(postsDirectory(name), "utf8");

      // don't need .md anymore
      name = name.slice(0, name.length - 3);

      // parse metadata from post
      let keyword = file.substring(0, 4);

      if (keyword != "&&&&") {
        throw new Error("you didn't specify metadata!");
      }

      let rawmetadata = "";

      file = file.slice(4);
      let cursor = 0;

      while (cursor < file.length) {
        keyword = file[cursor];
        if (keyword == "&") {
          // lookahead to next four characters
          keyword = file.substr(cursor, 4);
          if (keyword == "&&&&") {
            rawmetadata = file.slice(0, cursor);
            cursor += 4;
            break;
          }
        }

        cursor++;
      }
      file = file.slice(cursor);
      const jsonMetadata = JSON.parse(rawmetadata);

      // validate structure
      ["title", "date", "genre", "description"].forEach((key) => {
        if (!(key in jsonMetadata)) {
          throw new Error(`you forgot to specify ${key}`);
        }
      });

      metadata[name] = jsonMetadata;

      const post = createPage(
        `<div class="post">${converter.makeHtml(file)}</div>`,
        jsonMetadata["title"]
      );

      return writeFile(__dirname + `/../build/${name}.html`, post);
    })
  );

  const sortedPosts = Object.keys(metadata)
    .map((filename) => {
      const { date, ...rest } = metadata[filename];
      return { datestring: date, date: Date.parse(date), filename, ...rest };
    })
    .sort((a, b) => b.date - a.date);

  const postLinks = sortedPosts.map(
    ({ title, datestring, genre, description, filename }) => {
      return `<div class="post-preview">
      <div class="post-preview-top">
        <a href="${filename}.html">${title}</a>
        <span>${datestring}</span>
      </div>
      <p>${description}</p>
      </div>`;
    }
  );

  // TODO: client side routing for page transitions
  let index = createPage(`
  <div>
  <p>TODO: description of me and/or the site :)</p>
  <ul>
  ${postLinks.join("")}
  </ul>
  </div>
  `);

  // copy index.(css|html|js) to /build
  const indexcssstream = createReadStream(__dirname + "/../public/index.css");
  indexcssstream.pipe(createWriteStream(__dirname + "/../build/index.css"));
  const indexjsstream = createReadStream(__dirname + "/../dist/index.js");
  indexjsstream.pipe(createWriteStream(__dirname + "/../build/index.js"));
  const githubpngstream = createReadStream(__dirname + "/../public/github.png");
  githubpngstream.pipe(createWriteStream(__dirname + "/../build/github.png"));

  await writeFile(__dirname + "/../build/index.html", index);
}

main();
